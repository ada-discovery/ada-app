# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Default path
GET         /                                                                       controllers.AppController.index
GET         /studies                                                                controllers.AppController.studies

# User profiles
GET         /profile                                                                controllers.UserProfileController.profile
GET         /workspace                                                              controllers.UserProfileController.workspace
GET         /settings                                                               controllers.UserProfileController.settings
GET         /adminpanel                                                             controllers.UserProfileController.adminPanel

# logins
GET         /login                                                                  controllers.AuthController.login
POST        /login                                                                  controllers.AuthController.authenticate
GET         /logout                                                                 controllers.AuthController.logout
GET         /loggedout                                                              controllers.AuthController.loggedOut
GET         /unauthorized                                                           controllers.AuthController.unauthorized

# for testing
GET         /loginBasic                                                             controllers.AuthController.loginBasic
GET         /loginAdmin                                                             controllers.AuthController.loginAdmin

GET         /ldaplist                                                               controllers.JansDataSetController.listLDAP


# Admin
GET         /runnables                                                              controllers.AdminController.listRunnables
GET         /runScript                                                              controllers.AdminController.runScript(className : String)

# Users management
GET         /users                                                                  controllers.UserController.find(p: Int ?= 0, s: String ?= "name", filter : util.FilterSpec ?= new util.FilterSpec())
GET         /users/all                                                              controllers.UserController.listAll(s: Int ?= 2)
GET         /users/new                                                              controllers.UserController.create
POST        /users/save                                                             controllers.UserController.save
GET         /users/:id/get                                                          controllers.UserController.get(id: BSONObjectID)
GET         /users/:id                                                              controllers.UserController.edit(id: BSONObjectID)
POST        /users/:id                                                              controllers.UserController.update(id: BSONObjectID)
POST        /users/:id/delete                                                       controllers.UserController.delete(id: BSONObjectID)

# Translations
GET         /translations                                                           controllers.TranslationController.find(p: Int ?= 0, s: String ?= "original", filter : util.FilterSpec ?= new util.FilterSpec())
GET         /translations/all                                                       controllers.TranslationController.listAll(s: Int ?= 2)
GET         /translations/new                                                       controllers.TranslationController.create
POST        /translations/save                                                      controllers.TranslationController.save
GET         /translations/:id/get                                                   controllers.TranslationController.get(id: BSONObjectID)
GET         /translations/:id                                                       controllers.TranslationController.edit(id: BSONObjectID)
POST        /translations/:id                                                       controllers.TranslationController.update(id: BSONObjectID)
POST        /translations/:id/delete                                                controllers.TranslationController.delete(id: BSONObjectID)

# RedCap
GET         /redcap/records                                                         controllers.RedCapController.listRecords(p: Int ?= 0, s: String ?= "cdisc_dm_usubjd", f: String ?= "", filter : util.FilterSpec ?= new util.FilterSpec())
GET         /redcap/overview                                                        controllers.RedCapController.overview
GET         /redcap/metadatas                                                       controllers.RedCapController.listMetadatas(p: Int ?= 0, s: String ?= "field_name", f: String ?= "")
GET         /redcap/fieldNames                                                      controllers.RedCapController.listExportFields(p: Int ?= 0, s: String ?= "original_field_name", f: String ?= "")
GET         /redcap/records/get/:id                                                 controllers.RedCapController.showRecord(id: String)
GET         /redcap/metadatas/get/:id                                               controllers.RedCapController.showMetadata(id: String)
GET         /redcap/fieldNames/get/:id                                              controllers.RedCapController.showExportField(id: String)
GET         /redcap/records/exportAllAsCsv                                          controllers.RedCapController.exportRecordsAsCsv(delimiter : String ?= ",")
GET         /redcap/records/exportTranSMARTData                                     controllers.RedCapController.exportTranSMARTDataFile(delimiter : String ?= "\t")
GET         /redcap/records/exportTranSMARTMapping                                  controllers.RedCapController.exportTranSMARTMappingFile(delimiter : String ?= "\t")


#Generic study routes using DataSetDispatcher and DictionaryDispatcher
GET         /studies/records                                                        controllers.dataset.DataSetDispatcher.find(p: Int ?= 0, s: String ?= "", filter : util.FilterSpec ?= new util.FilterSpec())
GET         /studies/records/get/:id                                                controllers.dataset.DataSetDispatcher.get(id: BSONObjectID)
GET         /studies/records/exportAllAsCsv                                         controllers.dataset.DataSetDispatcher.exportAllRecordsAsCsv(delimiter : String ?= ",")
GET         /studies/records/exportAllAsJson                                        controllers.dataset.DataSetDispatcher.exportAllRecordsAsJson

GET         /studies/records/exportAsCsv                                            controllers.dataset.DataSetDispatcher.exportRecordsAsCsv(delimiter: String ?= ",", filter: util.FilterSpec ?= new util.FilterSpec())
GET         /studies/records/exportAsJson                                           controllers.dataset.DataSetDispatcher.exportRecordsAsJson(filter: util.FilterSpec ?= new util.FilterSpec())
GET         /studies/records/exportTranSMARTData                                    controllers.dataset.DataSetDispatcher.exportTranSMARTDataFile(delimiter: String ?= "\t")
GET         /studies/records/exportTranSMARTMapping                                 controllers.dataset.DataSetDispatcher.exportTranSMARTMappingFile(delimiter: String ?= "\t")
GET         /studies/fieldTypes                                                     controllers.dataset.DataSetDispatcher.overviewFieldTypes
GET         /studies/overview                                                       controllers.dataset.DataSetDispatcher.overview
GET         /studies/overviewList                                                   controllers.dataset.DataSetDispatcher.overviewList(p: Int ?= 0, s: String ?= "", filter: util.FilterSpec ?= new util.FilterSpec())
GET         /studies/scatterStats                                                   controllers.dataset.DataSetDispatcher.getScatterStats(xField: Option[String] ?= None, yField: Option[String] ?= None)
GET         /studies/distribution                                                   controllers.dataset.DataSetDispatcher.getDistribution(fieldName: Option[String] ?= None)
GET         /studies/fieldNames                                                     controllers.dataset.DataSetDispatcher.getFieldNames

GET         /studies/dictionary                                                     controllers.dataset.DictionaryDispatcher.overviewList(p: Int ?= 0, s: String ?= "name", filter : util.FilterSpec ?= new util.FilterSpec())
GET         /studies/dictionary/get/:name                                           controllers.dataset.DictionaryDispatcher.get(name: String)
POST        /studies/dictionary/save                                                controllers.dataset.DictionaryDispatcher.save
GET         /studies/dictionary/:name                                               controllers.dataset.DictionaryDispatcher.edit(name: String)
POST        /studies/dictionary/:name                                               controllers.dataset.DictionaryDispatcher.update(name: String)

GET         /studies/categories                                                     controllers.dataset.CategoryDispatcher.find(p: Int ?= 0, s: String ?= "name", filter : util.FilterSpec ?= new util.FilterSpec())
GET         /studies/categories/get/:id                                             controllers.dataset.CategoryDispatcher.get(id: BSONObjectID)
GET         /studies/categories/new                                                 controllers.dataset.CategoryDispatcher.create
POST        /studies/categories/save                                                controllers.dataset.CategoryDispatcher.save
GET         /studies/categories/get/:id                                             controllers.dataset.CategoryDispatcher.edit(id: BSONObjectID)
POST        /studies/categories/:id                                                 controllers.dataset.CategoryDispatcher.update(id: BSONObjectID)
POST        /studies/categories/:id/delete                                          controllers.dataset.CategoryDispatcher.delete(id: BSONObjectID)
GET         /studies/categories/getCategoryD3Root                                   controllers.dataset.CategoryDispatcher.getCategoryD3Root

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                                           controllers.Assets.at(path="/public", file)

# Map the webjar static assets to the /webjars URL
GET         /webjars/*file                                                          controllers.WebJarAssets.at(file)
