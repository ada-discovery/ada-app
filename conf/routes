# Routes

->          /                                                   core.Routes
->          /pdChallenge                                        pdchallenge.Routes

#RC predictions (to remove)
GET         /admin/showRCPrediction                             controllers.ml.RCPredictionController.showRCPrediction
POST        /admin/runRCPrediction                              controllers.ml.RCPredictionController.runRCPrediction


GET         /requests/new2                                      controllers.orderrequest.BatchOrderRequestController.createNew(dataSet: String)
POST        /requests/saveNew                                   controllers.orderrequest.BatchOrderRequestController.saveNew(dataSet: String)

GET         /requests                                           controllers.orderrequest.BatchOrderRequestController.find(p: Int ?= 0, s: String ?= "-timeCreated", filter: Seq[org.incal.core.FilterCondition] ?= Nil)
GET         /requests/active                                    controllers.orderrequest.BatchOrderRequestController.findActiveWithFilter(p1: Option[Int] ?= None, p2: Option[Int] ?= None, s: String ?= "-timeCreated", filter: Seq[org.incal.core.FilterCondition] ?= Nil)
POST        /requests/active                                    controllers.orderrequest.BatchOrderRequestController.findActive(p1: Option[Int] ?= None, p2: Option[Int] ?= None, s: String ?= "-timeCreated", filter: Seq[org.incal.core.FilterCondition] ?= Nil)
GET         /requests/all                                       controllers.orderrequest.BatchOrderRequestController.listAll(s: String ?= "original")

POST        /requests/save                                      controllers.orderrequest.BatchOrderRequestController.save
GET         /requests/:id/get                                   controllers.orderrequest.BatchOrderRequestController.get(id: BSONObjectID)
GET         /requests/:id/edit                                  controllers.orderrequest.BatchOrderRequestController.edit(id: BSONObjectID)
GET         /requests/:id/action                                controllers.orderrequest.BatchOrderRequestController.action(id: BSONObjectID, role: models.Role.Value)
POST        /requests/:id                                       controllers.orderrequest.BatchOrderRequestController.update(id: BSONObjectID)
POST        /requests/:id/delete                                controllers.orderrequest.BatchOrderRequestController.delete(id: BSONObjectID)
POST        /requests/:id/performAction                         controllers.orderrequest.BatchOrderRequestController.performAction(id: BSONObjectID, action: models.RequestAction.Value, role: models.Role.Value, description: Option[String] ?= None)

# Requests Settings
GET         /requestSettings                                    controllers.orderrequest.RequestSettingController.find(p: Int ?= 0, s: String ?= "-timeCreated", filter: Seq[org.incal.core.FilterCondition] ?= Nil)
GET         /requestSettings/all                                controllers.orderrequest.RequestSettingController.listAll(s: String ?= "original")
GET         /requestSettings/new                                controllers.orderrequest.RequestSettingController.create
POST        /requestSettings/save                               controllers.orderrequest.RequestSettingController.save

GET         /requestSettings/:id/get                            controllers.orderrequest.RequestSettingController.get(id: BSONObjectID)
GET         /requestSettings/:id/edit                           controllers.orderrequest.RequestSettingController.edit(id: BSONObjectID)
POST        /requestSettings/:id                                controllers.orderrequest.RequestSettingController.update(id: BSONObjectID)
POST        /requestSettings/:id/delete                         controllers.orderrequest.RequestSettingController.delete(id: BSONObjectID)


# Sample docs
GET         /samplesDocumentation                               controllers.orderrequest.DocumentationController.find(p: Int ?= 0, s: String ?= "-timeCreated", filter: Seq[org.incal.core.FilterCondition] ?= Nil)
GET         /samplesDocumentation/all                           controllers.orderrequest.DocumentationController.listAll(s: String ?= "original")
GET         /samplesDocumentation/new                           controllers.orderrequest.DocumentationController.create
POST        /samplesDocumentation/save                          controllers.orderrequest.DocumentationController.save

GET         /samplesDocumentation/dataSetId/:dataSetId/get      controllers.orderrequest.DocumentationController.getByDataSetId(dataSetId :String)
GET         /samplesDocumentation/dataSetId/:dataSetId          controllers.orderrequest.DocumentationController.download(dataSetId: String)

GET         /samplesDocumentation/:id/get                       controllers.orderrequest.DocumentationController.get(id: BSONObjectID)
GET         /samplesDocumentation/:id/edit                      controllers.orderrequest.DocumentationController.edit(id: BSONObjectID)
POST        /samplesDocumentation/:id                           controllers.orderrequest.DocumentationController.update(id: BSONObjectID)
POST        /samplesDocumentation/:id/delete                    controllers.orderrequest.DocumentationController.delete(id: BSONObjectID)