# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Default path
GET         /                                                                       controllers.AppController.index
GET         /studies                                                                controllers.AppController.studies

# User profiles
GET         /profile                                                                controllers.UserProfileController.profile
GET         /workspace                                                              controllers.UserProfileController.workspace
GET         /settings                                                               controllers.UserProfileController.settings
POST        /settings                                                               controllers.UserProfileController.updateSettings
GET         /adminpanel                                                             controllers.UserProfileController.adminPanel

# logins
GET         /login                                                                  controllers.AuthController.login
POST        /login                                                                  controllers.AuthController.authenticate
GET         /logout                                                                 controllers.AuthController.logout
GET         /loggedout                                                              controllers.AuthController.loggedOut
GET         /unauthorized                                                           controllers.AuthController.unauthorized


# for testing
GET         /loginBasic                                                             controllers.AuthController.loginBasic
GET         /loginAdmin                                                             controllers.AuthController.loginAdmin

# login/logout for REST interface
GET         /logoutRest                                                             controllers.AuthController.logoutREST

# ldap debugging
GET         /ldaplist                                                               controllers.LdapController.ldapList
GET         /ldap/settings                                                          controllers.LdapController.settings
GET         /ldap/users/all                                                         controllers.LdapUserController.listAll
GET         /ldap/:id/get                                                           controllers.LdapUserController.get(id: String)

# Admin
GET         /admin/runnables                                                        controllers.AdminController.listRunnables
GET         /admin/runScript                                                        controllers.AdminController.runScript(className : String)

# Data Set Import
GET         /admin/dataSetImport                                                    controllers.dataset.DataSetImportController.find(p: Int ?= 0, s: String ?= "dataSpaceName", filter: Seq[models.FilterCondition] ?= Nil)
GET         /admin/dataSetImport/all                                                controllers.dataset.DataSetImportController.listAll(s: String ?= "dataSpaceName")
GET         /admin/dataSetImport/new                                                controllers.dataset.DataSetImportController.create(concreteClassName: String)
GET         /admin/dataSetImport/execute/:id                                        controllers.dataset.DataSetImportController.execute(id: BSONObjectID)
POST        /admin/dataSetImport/save                                               controllers.dataset.DataSetImportController.save
GET         /admin/dataSetImport/:id/get                                            controllers.dataset.DataSetImportController.get(id: BSONObjectID)
GET         /admin/dataSetImport/:id                                                controllers.dataset.DataSetImportController.edit(id: BSONObjectID)
POST        /admin/dataSetImport/:id                                                controllers.dataset.DataSetImportController.update(id: BSONObjectID)
POST        /admin/dataSetImport/:id/delete                                         controllers.dataset.DataSetImportController.delete(id: BSONObjectID)

# Users management
GET         /users                                                                  controllers.UserController.find(p: Int ?= 0, s: String ?= "ldapDn", filter: Seq[models.FilterCondition] ?= Nil)
GET         /users/all                                                              controllers.UserController.listAll(s: String ?= "ldapDn")
GET         /users/new                                                              controllers.UserController.create
POST        /users/save                                                             controllers.UserController.save
GET         /users/:id/get                                                          controllers.UserController.get(id: BSONObjectID)
GET         /users/:id                                                              controllers.UserController.edit(id: BSONObjectID)
POST        /users/:id                                                              controllers.UserController.update(id: BSONObjectID)
POST        /users/:id/delete                                                       controllers.UserController.delete(id: BSONObjectID)

# Translations
GET         /translations                                                           controllers.TranslationController.find(p: Int ?= 0, s: String ?= "original", filter: Seq[models.FilterCondition] ?= Nil)
GET         /translations/all                                                       controllers.TranslationController.listAll(s: String ?= "original")
GET         /translations/new                                                       controllers.TranslationController.create
POST        /translations/save                                                      controllers.TranslationController.save
GET         /translations/:id/get                                                   controllers.TranslationController.get(id: BSONObjectID)
GET         /translations/:id                                                       controllers.TranslationController.edit(id: BSONObjectID)
POST        /translations/:id                                                       controllers.TranslationController.update(id: BSONObjectID)
POST        /translations/:id/delete                                                controllers.TranslationController.delete(id: BSONObjectID)

# RedCap
GET         /redcap/records                                                         controllers.RedCapController.listRecords(p: Int ?= 0, s: String ?= "cdisc_dm_usubjd", f: String ?= "", filter : Seq[models.FilterCondition] ?= Nil)
GET         /redcap/overview                                                        controllers.RedCapController.overview
GET         /redcap/metadatas                                                       controllers.RedCapController.listMetadatas(p: Int ?= 0, s: String ?= "field_name", f: String ?= "")
GET         /redcap/fieldNames                                                      controllers.RedCapController.listExportFields(p: Int ?= 0, s: String ?= "original_field_name", f: String ?= "")
GET         /redcap/records/get/:id                                                 controllers.RedCapController.showRecord(id: String)
GET         /redcap/metadatas/get/:id                                               controllers.RedCapController.showMetadata(id: String)
GET         /redcap/fieldNames/get/:id                                              controllers.RedCapController.showExportField(id: String)
GET         /redcap/records/exportAllAsCsv                                          controllers.RedCapController.exportRecordsAsCsv(delimiter : String ?= ",")
GET         /redcap/records/exportAllMetadatasAsCsv                                 controllers.RedCapController.exportAllMetadatasAsCsv(delimiter : String ?= ",")
GET         /redcap/records/exportTranSMARTData                                     controllers.RedCapController.exportTranSMARTDataFile(delimiter : String ?= "\t")
GET         /redcap/records/exportTranSMARTMapping                                  controllers.RedCapController.exportTranSMARTMappingFile(delimiter : String ?= "\t")


# DataSetDispatcher
GET         /studies/records                                                        controllers.dataset.DataSetDispatcher.find(p: Int ?= 0, s: String ?= "", filter: Seq[models.FilterCondition] ?= Nil)
GET         /studies/records/get/:id                                                controllers.dataset.DataSetDispatcher.get(id: BSONObjectID)
GET         /studies/records/fieldTypes                                             controllers.dataset.DataSetDispatcher.overviewFieldTypes
GET         /studies/fields                                                         controllers.dataset.DataSetDispatcher.getFields(fieldTypeIds: Seq[models.FieldTypeId.Value] ?= Nil)
GET         /studies/fieldNames                                                     controllers.dataset.DataSetDispatcher.getFieldNames
GET         /studies/fieldValue/:id/:fieldName                                      controllers.dataset.DataSetDispatcher.getFieldValue(id: BSONObjectID, fieldName: String)
GET         /studies/records/exportAsCsv                                            controllers.dataset.DataSetDispatcher.exportRecordsAsCsv(dataViewId: BSONObjectID, delimiter: String, replaceEolWithSpace: Boolean, eol: Option[String], filter: Seq[models.FilterCondition], tableColumnsOnly: Boolean)
GET         /studies/records/exportAsJson                                           controllers.dataset.DataSetDispatcher.exportRecordsAsJson(dataViewId: BSONObjectID, filter: Seq[models.FilterCondition], tableColumnsOnly: Boolean)
GET         /studies/records/exportTranSMARTData                                    controllers.dataset.DataSetDispatcher.exportTranSMARTDataFile(delimiter: String ?= "\t")
GET         /studies/records/exportTranSMARTMapping                                 controllers.dataset.DataSetDispatcher.exportTranSMARTMappingFile(delimiter: String ?= "\t")
GET         /studies/getView                                                        controllers.dataset.DataSetDispatcher.getView(dataViewId: BSONObjectID, tablePages: Seq[models.TablePage] ?= Nil, filterOrIds: Seq[Either[Seq[models.FilterCondition], BSONObjectID]] ?= Nil, filterChanged: Boolean ?= false)
GET         /studies/getDefaultView                                                 controllers.dataset.DataSetDispatcher.getDefaultView
GET         /studies/scatter                                                        controllers.dataset.DataSetDispatcher.getScatterStats(xFieldName: Option[String] ?= None, yFieldName: Option[String] ?= None, groupFieldName: Option[String] ?= None, filterOrId: Either[Seq[models.FilterCondition], BSONObjectID] ?= Left(Nil))
GET         /studies/distribution                                                   controllers.dataset.DataSetDispatcher.getDistribution(fieldName: Option[String] ?= None, groupFieldName: Option[String] ?= None, filterOrId: Either[Seq[models.FilterCondition], BSONObjectID] ?= Left(Nil))
GET         /studies/correlations                                                   controllers.dataset.DataSetDispatcher.getCorrelations(fieldNames: Seq[String], filterOrId: Either[Seq[models.FilterCondition], BSONObjectID] ?= Left(Nil))
GET         /studies/cumulativeCount                                                controllers.dataset.DataSetDispatcher.getCumulativeCount(fieldName: Option[String] ?= None, groupFieldName: Option[String], filterOrId: Either[Seq[models.FilterCondition], BSONObjectID] ?= Left(Nil))
GET         /studies/records/findCustom                                             controllers.dataset.DataSetDispatcher.findCustom(filterOrId: Either[Seq[models.FilterCondition], BSONObjectID] ?= Left(Nil), orderBy: String ?= "", projection: Seq[String] ?= Nil, limit: Option[Int] ?= None, skip: Option[Int] ?= None)

# DictionaryDispatcher
GET         /studies/dictionary                                                     controllers.dataset.DictionaryDispatcher.overviewList(p: Int ?= 0, s: String ?= "name", filter : Seq[models.FilterCondition] ?= Nil)
GET         /studies/dictionary/listAll                                             controllers.dataset.DictionaryDispatcher.listAll(s: String ?= "name")
GET         /studies/dictionary/get/:name                                           controllers.dataset.DictionaryDispatcher.get(name: String)
POST        /studies/dictionary/save                                                controllers.dataset.DictionaryDispatcher.save
GET         /studies/dictionary/edit/:name                                          controllers.dataset.DictionaryDispatcher.edit(name: String)
POST        /studies/dictionary/:name                                               controllers.dataset.DictionaryDispatcher.update(name: String)
GET         /studies/dictionary/infer/                                              controllers.dataset.DictionaryDispatcher.inferDictionary
POST        /studies/dictionary/updateLabel/:id/:label                              controllers.dataset.DictionaryDispatcher.updateLabel(id: String, label: String)
GET         /studies/dictionary/jsRoutes                                            controllers.dataset.DictionaryDispatcher.jsRoutes
GET         /studies/dictionary/exportAsCsv                                         controllers.dataset.DictionaryDispatcher.exportRecordsAsCsv(delimiter: String, replaceEolWithSpace: Boolean, eol: Option[String], filter: Seq[models.FilterCondition], tableColumnsOnly: Boolean)
GET         /studies/dictionary/exportAsJson                                        controllers.dataset.DictionaryDispatcher.exportRecordsAsJson(filter: Seq[models.FilterCondition], tableColumnsOnly: Boolean)

# CategoryDispatcher
GET         /studies/categories                                                     controllers.dataset.CategoryDispatcher.find(p: Int ?= 0, s: String ?= "name", filter : Seq[models.FilterCondition] ?= Nil)
GET         /studies/categories/get/:id                                             controllers.dataset.CategoryDispatcher.get(id: BSONObjectID)
GET         /studies/categories/new                                                 controllers.dataset.CategoryDispatcher.create
POST        /studies/categories/save                                                controllers.dataset.CategoryDispatcher.save
POST        /studies/categories/save/:name                                          controllers.dataset.CategoryDispatcher.saveForName(name: String)
POST        /studies/categories/:id                                                 controllers.dataset.CategoryDispatcher.update(id: BSONObjectID)
POST        /studies/categories/:id/delete                                          controllers.dataset.CategoryDispatcher.delete(id: BSONObjectID)
GET         /studies/categories/idAndNames                                          controllers.dataset.CategoryDispatcher.idAndNames
GET         /studies/categories/getCategoryD3Root                                   controllers.dataset.CategoryDispatcher.getCategoryD3Root
GET         /studies/categories/getCategoriesWithFieldsAsTreeNodes                  controllers.dataset.CategoryDispatcher.getCategoriesWithFieldsAsTreeNodes
GET         /studies/categories/relocateToParent/:id/$parentId<[^/]*>               controllers.dataset.CategoryDispatcher.relocateToParent(id: BSONObjectID, parentId: Option[BSONObjectID])
GET         /studies/categories/addFields                                           controllers.dataset.CategoryDispatcher.addFields(categoryId: BSONObjectID, fieldNames: Seq[String])
POST        /studies/categories/updateLabel/:id/:label                              controllers.dataset.CategoryDispatcher.updateLabel(id: BSONObjectID, label: String)
GET         /studies/categories/jsRoutes                                            controllers.dataset.CategoryDispatcher.jsRoutes

# FilterDispatcher
GET         /studies/filters                                                        controllers.dataset.FilterDispatcher.find(p: Int ?= 0, s: String ?= "name", filter : Seq[models.FilterCondition] ?= Nil)
GET         /studies/filters/get/:id                                                controllers.dataset.FilterDispatcher.get(id: BSONObjectID)
GET         /studies/filters/new                                                    controllers.dataset.FilterDispatcher.create
POST        /studies/filters/save                                                   controllers.dataset.FilterDispatcher.save
POST        /studies/filters/saveAjax                                               controllers.dataset.FilterDispatcher.saveAjax(filter: models.Filter)
POST        /studies/filters/:id                                                    controllers.dataset.FilterDispatcher.update(id: BSONObjectID)
POST        /studies/filters/:id/delete                                             controllers.dataset.FilterDispatcher.delete(id: BSONObjectID)
GET         /studies/filters/idAndNames                                             controllers.dataset.FilterDispatcher.getIdAndNames

# DataViewDispatcher
GET         /studies/dataviews                                                      controllers.dataset.DataViewDispatcher.find(p: Int ?= 0, s: String ?= "name", filter : Seq[models.FilterCondition] ?= Nil)
GET         /studies/dataviews/get/:id                                              controllers.dataset.DataViewDispatcher.get(id: BSONObjectID)
GET         /studies/dataviews/getAndShowView/:id                                   controllers.dataset.DataViewDispatcher.getAndShowView(id: BSONObjectID)
GET         /studies/dataviews/new                                                  controllers.dataset.DataViewDispatcher.create
POST        /studies/dataviews/save                                                 controllers.dataset.DataViewDispatcher.save
POST        /studies/dataviews/:id                                                  controllers.dataset.DataViewDispatcher.update(id: BSONObjectID)
POST        /studies/dataviews/updateAndShowView/:id                                controllers.dataset.DataViewDispatcher.updateAndShowView(id: BSONObjectID)
POST        /studies/dataviews/:id/delete                                           controllers.dataset.DataViewDispatcher.delete(id: BSONObjectID)
GET         /studies/dataviews/copy                                                 controllers.dataset.DataViewDispatcher.copy(dataViewId: BSONObjectID)
GET         /studies/dataviews/idAndNames                                           controllers.dataset.DataViewDispatcher.idAndNames
GET         /studies/dataviews/addDistributions                                     controllers.dataset.DataViewDispatcher.addDistributions(dataViewId: BSONObjectID, fieldNames: Seq[String])
GET         /studies/dataviews/addDistribution                                      controllers.dataset.DataViewDispatcher.addDistribution(dataViewId: BSONObjectID, fieldName: String, groupFieldName: Option[String])
GET         /studies/dataviews/addCumulativeCounts                                  controllers.dataset.DataViewDispatcher.addCumulativeCounts(dataViewId: BSONObjectID, fieldNames: Seq[String])
GET         /studies/dataviews/addCumulativeCount                                   controllers.dataset.DataViewDispatcher.addCumulativeCount(dataViewId: BSONObjectID, fieldName: String, groupFieldName: Option[String])
GET         /studies/dataviews/addBoxPlots                                          controllers.dataset.DataViewDispatcher.addBoxPlots(dataViewId: BSONObjectID, fieldNames: Seq[String])
GET         /studies/dataviews/addScatter                                           controllers.dataset.DataViewDispatcher.addScatter(dataViewId: BSONObjectID, xFieldName: String, yFieldName: String, groupFieldName: Option[String])
GET         /studies/dataviews/addCorrelation                                       controllers.dataset.DataViewDispatcher.addCorrelation(dataViewId: BSONObjectID, fieldNames: Seq[String])
GET         /studies/dataviews/addTableFields                                       controllers.dataset.DataViewDispatcher.addTableFields(dataViewId: BSONObjectID, fieldNames: Seq[String])
GET         /studies/dataviews/saveFilter                                           controllers.dataset.DataViewDispatcher.saveFilter(dataViewId: BSONObjectID, filterOrIds: Seq[Either[Seq[models.FilterCondition], BSONObjectID]])

GET         /studies/setting                                                        controllers.dataset.DataSetSettingController.find(p: Int ?= 0, s: String ?= "dataSetId", filter : Seq[models.FilterCondition] ?= Nil)
GET         /studies/setting/all                                                    controllers.dataset.DataSetSettingController.listAll(s: String ?= "dataSetId")
GET         /studies/setting/new                                                    controllers.dataset.DataSetSettingController.create
POST        /studies/setting/save                                                   controllers.dataset.DataSetSettingController.save
GET         /studies/setting/:id/get                                                controllers.dataset.DataSetSettingController.get(id: BSONObjectID)
GET         /studies/setting/:id                                                    controllers.dataset.DataSetSettingController.edit(id: BSONObjectID)
GET         /studies/setting/edit/                                                  controllers.dataset.DataSetSettingController.editForDataSet(dataSet: String)
POST        /studies/setting/:id                                                    controllers.dataset.DataSetSettingController.update(id: BSONObjectID)
POST        /studies/setting/update/:id                                             controllers.dataset.DataSetSettingController.updateForDataSet(id: BSONObjectID)
POST        /studies/setting/:id/delete                                             controllers.dataset.DataSetSettingController.delete(id: BSONObjectID)

GET         /studies/metainfo                                                       controllers.dataset.DataSpaceMetaInfoController.find(p: Int ?= 0, s: String ?= "name", filter : Seq[models.FilterCondition] ?= Nil)
GET         /studies/metainfo/all                                                   controllers.dataset.DataSpaceMetaInfoController.listAll(s: String ?= "name")
GET         /studies/metainfo/new                                                   controllers.dataset.DataSpaceMetaInfoController.create
POST        /studies/metainfo/save                                                  controllers.dataset.DataSpaceMetaInfoController.save
GET         /studies/metainfo/:id/get                                               controllers.dataset.DataSpaceMetaInfoController.get(id: BSONObjectID)
GET         /studies/metainfo/:id                                                   controllers.dataset.DataSpaceMetaInfoController.edit(id: BSONObjectID)
POST        /studies/metainfo/:id                                                   controllers.dataset.DataSpaceMetaInfoController.update(id: BSONObjectID)
POST        /studies/metainfo/:id/delete                                            controllers.dataset.DataSpaceMetaInfoController.delete(id: BSONObjectID)
POST        /studies/metainfo/deleteDataSet/:id                                     controllers.dataset.DataSpaceMetaInfoController.deleteDataSet(id: BSONObjectID)

# Message
GET         /messages/stream                                                        controllers.MessageController.stream
GET         /messages/eventStream                                                   controllers.MessageController.eventStream
POST        /messages/saveUserMessage                                               controllers.MessageController.saveUserMessage(message: String)
GET         /message/listMostRecent                                                 controllers.MessageController.listMostRecent(limit: Int)

# Map static resources from the /public folder to the /assets URL path
#GET         /assets/*file                                                           controllers.Assets.at(path="/public", file)
GET         /assets/*file                                                           controllers.Assets.versioned(path="/public", file)

# Map the webjar static assets to the /webjars URL
GET         /webjars/*file                                                          controllers.WebJarAssets.at(file)
