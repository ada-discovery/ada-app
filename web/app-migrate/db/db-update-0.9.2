// Launch the query 1 in order to verify if there are double users
//1
db.users.aggregate([
    {$group: {
        _id: "$oidcUserName",
        uniqueIds: {$addToSet: "$_id"},
        count: {$sum: 1}
        }
    },
    {$match: { $and: [{count: {"$gt": 1}}, {_id : {$ne:null}}] }
    },
 ]).forEach(function(item)
 {
    for(i = 0; i < item.uniqueIds.length; i++){
        var uniqueId = "" + item.uniqueIds[i]
        db.users.find({ $and: [{_id: ObjectId(uniqueId)}, {permissions: { $exists: true, $size: 0 }}]})
            .forEach(function(itemF){
            var itemF_Id = "" + itemF._id;
            var createDataViewsCnt  = db.dictionaries.count({"dataviews.createdById" : ObjectId(itemF_Id)})
            var createFilterCnt = db.dictionaries.count({"filters.createdById" : ObjectId(itemF_Id)})
            var ownerIdCnt = db.dataset_settings.count({"ownerId" : ObjectId(itemF_Id)});

            print("Should delete duplicate user _id: " + itemF_Id + " oidcUserName: " + itemF.oidcUserName + " permissions: '" + itemF.permissions +"' created views: " + createDataViewsCnt +
            " created filters: " + createFilterCnt + " ownerIdCnt: " + ownerIds + (createDataViewsCnt == 0 && createFilterCnt == 0 && ownerIdCnt == 0 ? " delete cmd: db.users.remove({_id : ObjectId('" + itemF_Id + "')})" : ""))
            })
    }
 });

// In case "created views", "created filters" and "ownerIds" is zero just delete user. Ex: db.users.remove({_id : ObjectId("userId")}
// If "created views", "created filters" or "ownerIds" is not zero, launch updates with the following associates queries:

// a) Find dataviews with createdById = ObjectId("userId_to_lock"):
//    db.dictionaries.find({"dataviews.createdById" : ObjectId("userId_to_lock")}, {"dataviews.createdById" : 1, "dataviews.default": 1, "dataviews.isPrivate": 1});
// b) Find index of array to update. Fn return _id "document_id" and matchedIndex "must be >= 0":
//    db.dictionaries.aggregate([ { $project: { "matchedIndex": { $indexOfArray: [ "$dataviews.createdById", ObjectId("userId_to_lock")] } } } ])
// c) Update dataviews with right user _id:
//    db.dictionaries.update({"_id" : ObjectId("document_id")}, { $set : {"$dataviews.matchedIndex.createdById" : ObjectId("userId_to_update")}});

// d) Find filters with createdById = ObjectId("userId_to_lock"):
//    db.dictionaries.find({"filters.createdById" : ObjectId("userId_to_lock")}, {"filters.createdById" : 1, "filters.name" : 1});
// e) Find index of array to update. Fn return _id "document_id" and matchedIndex "must be >= 0":
//    db.dictionaries.aggregate([ { $project: { "matchedIndex": { $indexOfArray: [ "$filters.createdById", ObjectId("userId_to_lock")] } } } ]);
// f) Update dataviews with right user _id:
//    db.dictionaries.update({"_id" : ObjectId("document_id")}, { $set : {"$filters.matchedIndex.createdById" : ObjectId("userId_to_update")}});

// g) Find datasetting with duplicate ownerId:
//    db.dataset_settings.find({"ownerId" : ObjectId("userId_to_lock")});
// h) Update ownerid with right user if there is a result from "g":
//    db.dataset_settings.updateMany({"ownerId" : ObjectId("userId_to_lock")}, {$set : {"ownerId" : ObjectId("userId_to_update")}})

// i) Lock user and change userId value
//    db.users.update({"_id": ObjectId("userId_to_lock")},{$set: {"locked" : true, "userId" : "userName_Duplicate"}})

